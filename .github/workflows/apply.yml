name: 'apply'

on:
  workflow_dispatch:
    inputs:
      class_name:
        description: 'Tap class name'
        required: true
        default: 'demo'
      tap_password:
        description: 'Password for ec2 instances and applications'
        required: true
        default: 'tapdemo'

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
        
    - name: Terraform Init
      env: 
        AWS_ACCESS_KEY_ID: ${{ sects.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ sreecrets.AWS_IAM_SECRET }}
      run: terraform init && terraform workspace new '${{ github.event.inputs.class_name }}'
        
    - name: Create Terraform Workspace
      env: 
        AWS_ACCESS_KEY_ID: ${{ sects.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ sreecrets.AWS_IAM_SECRET }}
      run: terraform workspace new '${{ github.event.inputs.class_name }}'
      continue-on-error: true

    - name: Select Terraform Workspace 
      env: 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET }}
      run: terraform init && terraform workspace select '${{ github.event.inputs.class_name }}'

    # # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      env: 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET }}
      run: terraform apply -auto-approve -var=bootstrap_password='${{ github.event.inputs.tap_password }}' --var-file envs/tap-'${{ github.event.inputs.class_name }}'.tfvars

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
